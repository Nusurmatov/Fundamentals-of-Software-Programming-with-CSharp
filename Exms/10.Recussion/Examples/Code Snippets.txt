/* Ex1 - Fibonacci Sequence (Classic Example):
Although it is intuitive, the present solution is one of the classical examples when the usage of recursion is
highly inefficient as there are many excessive calculations (of one and the
same element of the sequence) due to the recursive calls.
*/

long Fib(int n)
{
    if (n <= 2)
    {
        return 1;
    }
    return Fib(n - 1) + Fib(n - 2);
}

/* Output:

*/


// Ex2 - Fibonacci Sequence (optimized through Memoization)

Console.Write("n = ");
int n = int.Parse(Console.ReadLine());

long[] numbers = new long[n + 2];
numbers[1] = 1;
numbers[2] = 1;

long result = Fib(n);
Console.WriteLine("fib({0}) = {1}", n, result);

long Fib(int n)
{
    if (0 == numbers[n])
    {
        numbers[n] = Fib(n - 1) + Fib(n - 2);
    }
    return numbers[n];
}

/* Output:
n = 100
fib(100) = 3736710778780434371
*/

// Ex3 - Fibonacci Sequence (Iterative Solution)

Console.Write("n = ");
int n = int.Parse(Console.ReadLine());

long result = Fib(n);
Console.WriteLine("fib({0}) = {1}", n, result);

long Fib(int n)
{
    long fn = 0;
    long fnMinus1 = 1;
    long fnMinus2 = 1;

    for (int i = 2; i < n; i++)
    {
        fn = fnMinus1 + fnMinus2;
        fnMinus2 = fnMinus1;
        fnMinus1 = fn;
    }

    return fn;
}

/* Output:
n = 100
fib(100) = 3736710778780434371
*/


// E4 - Factorial (Classic Example): 

decimal Factorial(int n)
{
    // The bottom of the recursion
    if (n == 0)
    {
        return 1;
    }
    // Recursive call: the method calls itself
    else
    {
        return n * Factorial(n - 1);
    }
}

Console.Write("n = ");
int n = int.Parse(Console.ReadLine() ?? "7");
decimal factorial = Factorial(n);
Console.WriteLine("{0}! = {1}", n, factorial);

/* Output:
n = 17
17! = 355687428096000
*/


// Ex5 - Simulation of N nested loops (Recursion):

class RecursiveNestedLoops
{
    static int numberOfLoops;
    static int numberOfIterations;
    static int[] loops;
    static void Main()
    {
        Console.Write("N = ");
        numberOfLoops = int.Parse(Console.ReadLine());
        Console.Write("K = ");
        numberOfIterations = int.Parse(Console.ReadLine());
        loops = new int[numberOfLoops];
        NestedLoops(0);
    }
    
    static void NestedLoops(int currentLoop)
    {
        if (currentLoop == numberOfLoops)
        {
            PrintLoops();
            return;  // That stops the method execution
        }
        for (int counter=1; counter<=numberOfIterations; counter++)
        {
            loops[currentLoop] = counter;
            NestedLoops(currentLoop + 1);
        }
    }
    
    static void PrintLoops()
    {
        for (int i = 0; i < numberOfLoops; i++)
        {
            Console.Write("{0} ", loops[i]);
        }
    
        Console.WriteLine();
    }
}

/* Output:
N = 2
K = 2
1 1 
1 2 
2 1 
2 2 
*/


/* Ex6 - Simulation of N nested loops (Iteration): */

using System.Diagnostics;

class IterativeNestedLoops
{
    static int numberOfLoops;
    static int numberOfIterations;
    static int[] loops;
    static void Main()
    {
        var time = Stopwatch.StartNew();
        Console.Write("N = ");
        numberOfLoops = int.Parse(Console.ReadLine());
        Console.Write("K = ");
        numberOfIterations = int.Parse(Console.ReadLine());
        loops = new int[numberOfLoops];
        NestedLoops();
        time.Stop();
        Console.WriteLine("The execution time: {0} ms", time.ElapsedMilliseconds);
    }
    
    static void NestedLoops()
    {
        InitLoops();
        int currentPosition;
        while (true)
        {
            PrintLoops();
            currentPosition = numberOfLoops - 1;
            loops[currentPosition] = loops[currentPosition] + 1;
            
            while (loops[currentPosition] > numberOfIterations)
            {
                loops[currentPosition] = 1;
                currentPosition--;
         
                if (currentPosition < 0)
                {
                    return;  // That stops the method execution
                }
            loops[currentPosition] = loops[currentPosition] + 1;
            }
        }
    }

    static void InitLoops()
    {
        for (int i = 0; i < numberOfLoops; i++)
        {
            loops[i] = 1;
        }
    }

    static void PrintLoops()
    {
        for (int i = 0; i < numberOfLoops; i++)
        {
            Console.Write("{0} ", loops[i]);
        }

        Console.WriteLine();
    }
}

/* Output:
N = 2
K = 3
1 1 
1 2 
1 3 
2 1 
2 2 
2 3 
3 1 
3 2 
3 3 
The execution time: 2066 ms
*/


// Ex7 - Searching for Paths in a Labyrinth (Plain):

char[,] lab =
{
    {' ', ' ', ' ', '*', ' ', ' ', ' '},
    {'*', '*', ' ', '*', ' ', '*', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', '*', '*', '*', '*', '*', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', 'e'},
};

void FindPath(int row, int col)
{
    if ((col < 0) || (row < 0) || (col >= lab.GetLength(1)) || (row >= lab.GetLength(0)))
    {
        // We are out of the labyrinth
        return;
    }

    // Check if we have found the exit
    if (lab[row, col] == 'e')
    {
        Console.WriteLine("Found the exit!");
    }

    if (lab[row, col] != ' ')
    {
        // The current cell is not free
        return;
    }

    // Mark the current cell as visited
    lab[row, col] = 's';
    
    // Invoke recursion to explore all possible directions
    FindPath(row, col - 1); // left
    FindPath(row - 1, col); // up
    FindPath(row, col + 1); // right
    FindPath(row + 1, col); // down
    
    // Mark back the current cell as free
    lab[row, col] = ' ';
}

FindPath(0, 0);

/* Output:
Found the exit!
Found the exit!
Found the exit!
*/


// Ex8 - Searching for Paths in a Labyrinth (Informative):

/*
char[,] lab =
{
    {' ', ' ', ' ', '*', ' ', ' ', ' '},
    {'*', '*', ' ', '*', ' ', '*', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', ' '},
    {' ', '*', '*', '*', '*', '*', ' '},
    {' ', ' ', ' ', ' ', ' ', ' ', 'e'},
};
*/

char[,] lab =
{
    {'e'},
};

char[] exitPaths = new char[lab.GetLength(0) * lab.GetLength(1)];
int position = 0;

void FindPath(int row, int col, char direction)
{
    if ((col < 0) || (row < 0) || (col >= lab.GetLength(1)) || (row >= lab.GetLength(0)))
    {
        // We are out of the labyrinth
        return;
    }

    // Check if we have found the exit
    if (lab[row, col] == 'e')
    {
        PrintExitPaths(exitPaths, 0, position);
    }

    if (lab[row, col] != ' ')
    {
        // The current cell is not free
        return;
    }

    // Append the direction to the path
    exitPaths[position] = direction;
    position++;

    // Mark the current cell as visited
    lab[row, col] = 's';
    
    // Invoke recursion to explore all possible directions
    FindPath(row, col - 1, 'L'); // left
    FindPath(row - 1, col, 'U'); // up
    FindPath(row, col + 1, 'R'); // right
    FindPath(row + 1, col, 'D'); // down
    
    // Mark back the current cell as free
    lab[row, col] = ' ';

    // Remove the last direction from the path
    position--;
}

void PrintExitPaths(char[] paths, int start, int end)
{
    Console.Write("Found an exit path: ");
    for (int i = start; i < end; i++)
    {
        Console.Write(paths[i]);
    }
    Console.WriteLine();
}

FindPath(0, 0, 'S');

/* Output:
Found an exit path: SRRDDLLDDRRRRR
Found an exit path: SRRDDRRUURRDDD
Found an exit path: SRRDDRRRRD  
*/