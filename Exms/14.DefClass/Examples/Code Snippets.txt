// Ex1 - Dog Class:

// Class declaration
public class Dog
{ // Opening bracket of the class body
   
    // Field declaration
    private string name;
   
    // Constructor declaration (peremeterless empty constructor)
    public Dog()
    { }
   
    // Another constructor declaration
    public Dog(string name)
    {
        this.name = name;
    }
    
    // Property declaration
    public string Name
    {
        get { return name; }
        set { name = value; }
    }
   
    // Method declaration (non-static)
    public void Bark()
    {
        Console.WriteLine("{0} said: Wow-wow!",
        name ?? "[unnamed dog]");
    }
} // Closing bracket of the class body

public class CreateDogs
{
    static void Main()
    {
        string firstDogName = null;
        Console.Write("Enter first dog name: ");
        firstDogName = Console.ReadLine();
      
        // Using a constructor to create a dog with specified name
        Dog firstDog = new Dog(firstDogName);
      
        // Using a constructor to create a dog wit a default name
        Dog secondDog = new Dog();
        Console.Write("Enter second dog name: ");
        string secondDogName = Console.ReadLine();
      
        // Using property to set the name of the dog
        secondDog.Name = secondDogName;
      
        // Creating a dog with a default name
        Dog thirdDog = new Dog();
        Dog[] dogs = new Dog[] { firstDog, secondDog, thirdDog };
      
        foreach (Dog dog in dogs)
        {
            dog.Bark();
        }
    }
}

/* Output:
Enter first dog name: Tarzan
Enter second dog name: Boyka
Tarzan said: Wow-wow!       
Boyka said: Wow-wow!        
[unnamed dog] said: Wow-wow!
*/


// Ex4 - Constructors (Variable Number of Arguments and Overloading):

public class Dog
{
    private string name;
    private int age;    
    private double length;
    private Collar collar;

    // No parameters
    public Dog()
    : this("Axl") // Constructor call
    {
        // More code could be added here
    }
    
    // One parameter
    public Dog(string name)
    : this(name, 1) // Constructor call
    { }
    
    // Two parameters
    public Dog(string name, int age)
    : this(name, age, 0.3) // Constructor call
    { }
    
    // Three parameters
    public Dog(string name, int age, double length)
    : this(name, age, length, new Collar()) // Constructor call
    { }

    // Four parameters 
    public Dog(string name, int age, double length, Collar collar)
    {
        this.name = name;
        this.age = age;
        this.length = length;
        this.collar = collar;
    }
}

public class Collar
{
    private int size;

    public Collar()
    { }
}

public class Lecture
{
    public Lecture(string subject, params string[] studentsNames)
    {
        // … Initialization of the instance variables … 
    }
}

class Constructor
{
    static void Main()
    {
        Lecture lecture = new Lecture("Biology", "Peter", "Mike", "Steven");
    }
}


/* Ex5 - Properties (Variable Number of Arguments and Overloading):
Depending on their definition we can classify the properties as follows:
1. Read-only, i.e. these properties have only a get method as shown by
the area of the rectangle.
2. Write-only, i.e. these properties have only a set method, but no
method for reading the value of the property.
3. And the most common case is read-write, where the property has
methods both for reading and for changing the value.
*/

class Rectangle
{
    private float height;
    private float width;

    public Rectangle(float height, float width)
    {
        this.height = height;
        this.width = width;
    }

    // Obtaining the value of the property area
    public float Area
    {
        get { return this.height * this.width; }
    }
}

public class Dog
{
    int age;
    public int Age
    {
        get { return this.age; }
        set
        {
            // Take precaution: perform check for correctness
            if (value < 0)
            {
                throw new ArgumentException("Invalid argument: Age should be a positive number.");
            }

            // Assign the new correct value
            this.age = value;
        }
    }
}

class Point
{
    // automatic properties
    public double X { get; set; }
    public double Y { get; set; }

    public Point(int x, int y)
    {
        this.X = x;
        this.Y = y;
    }
}


