/* Ex1 - Comparing Strings:
Please note that according to the methods Compare(…) and CompareTo(…)
the small letters are lexicographically before the capital ones. The
correctness of this rule is quite controversial as in the Unicode table the
capital letters are before the small ones. For example due to the standard
Unicode, the letter “A” has a code 65, which is smaller than the code of the
letter “a” (97)
*/

using System.Text;

string word1 = "C#";
string word2 = "c#";
Console.WriteLine(word1.Equals("C#"));  // True
Console.WriteLine(word1.Equals(word2));  // False
Console.WriteLine(word1.Equals(word2, StringComparison.CurrentCultureIgnoreCase));  // True
Console.WriteLine(word1 == "C#");  // True
Console.WriteLine(word1 == word2);  // False

string score = "sCore";
string scary = "scary";
Console.WriteLine(score.CompareTo(scary));  // 1
Console.WriteLine(scary.CompareTo(score));  // -1
Console.WriteLine(scary.CompareTo(scary));  // 0
Console.WriteLine();

string alpha = "alpha";
string score1 = "sCorE";
string score2 = "score";
Console.WriteLine(string.Compare(alpha, score1, false));  // -1
Console.WriteLine(string.Compare(score1, score2, false));  // 1
Console.WriteLine(string.Compare(score1, score2, true));  // 0
Console.WriteLine(string.Compare(score1, score2, StringComparison.CurrentCultureIgnoreCase));  // 0
Console.WriteLine();

string first = "Straße";
string second = "Strasse";
Console.WriteLine(first == second);  // False
Console.WriteLine(first.CompareTo(second));  // 0 – equal strings
Console.WriteLine();

string hel = "Hel";
string hello = "Hello";
string copy = hel + "lo";
Console.WriteLine(copy == hello);  // True
Console.WriteLine();

string declared = "Intern pool";
string built = new StringBuilder("Intern pool").ToString();
string interned = string.Intern(built);
Console.WriteLine(object.ReferenceEquals(declared, built));  // False
Console.WriteLine(object.ReferenceEquals(declared, interned));  // True

/* Output:
True
False
True 
True 
False
1    
-1   
0    
     
-1   
1    
0    
0    
     
False
1    
     
True 
     
False
True
*/


/* Ex2 - Concatenating Strings:
Any data, which can be presented in a text form, can be appended to a string. 
Concatenation is possible with numbers, characters, dates, etc.
*/

string greet = "Hello, ";
string name = "reader!";
string result = string.Concat(greet, name);  // result = greet + name;
result += " How are you?";  // Compound assignment
Console.WriteLine(result); // Hello reader! How are you?
Console.WriteLine();

string firstName = "John";
string lastName = "Smith";
string fullName = firstName + " " + lastName;
int age = 28;
string nameAndAge = "Name: " + fullName + "\nAge: " + age;
Console.WriteLine(nameAndAge);

/* Output:
Hello, reader! How are you?

Name: John Smith
Age: 28
*/


// Ex3 - Switching Letter Cases:

string text = "All Kind OF LeTTeRs";
Console.WriteLine(text.ToLower());  // all kind of letters
Console.WriteLine();

string pass1 = "PasswoRd";
string pass2 = "PaSSwoRD";
string pass3 = "password";
Console.WriteLine(pass1.ToUpper() == "PASSWORD");  // True
Console.WriteLine(pass2.ToUpper() == "PASSWORD");  // True
Console.WriteLine(pass3.ToUpper() == "PASSWORD");  // True
/* About three line of code also can be done with Equals method
by ingoring the case... */

/* Output:
Hello, reader! How are you?

Name: John Smith
Age: 28
*/


// Ex4 - Searching for a String within Another String:

// positions: 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20  
// str -      C  #     P  r  o  g  r  a  m  m  i  n  g     C  o  u  r  s  e
string str = "C# Programming Course";
int index = str.IndexOf("C#"); // index = 0
index = str.IndexOf("Course"); // index = 15
index = str.IndexOf("COURSE"); // index = -1
index = str.IndexOf("ram"); // index = 7
index = str.IndexOf("r"); // index = 4
index = str.IndexOf("r", 5); // index = 7
index = str.IndexOf("r", 10); // index = 18

// Finding All Occurances of a Substring:
string quote = "The main intent of the \"Intro C#\" book is to introduce the C# programming to newbies.";
string keyword = "C#";
index = quote.IndexOf(keyword);
while (index != -1)
{
    Console.WriteLine("{0} found at index: {1}", keyword, index);
    index = quote.IndexOf(keyword, index + 1);
}

/* Output:
C# found at index: 30
C# found at index: 59
*/


// Ex5 - Extracting a Portion of a String:

string path = "C:\\Pics\\CoolPic.jpg";
string fileName = path.Substring(8, 7);  // fileName = "CoolPic"
Console.WriteLine($"File Name - {fileName}");

int index = path.LastIndexOf("\\");  // index = 7
string fullName = path.Substring(index + 1);  // fullName = "CoolPic.jpg"
Console.WriteLine($"Full Name of File - {fullName}");

/* Output:
File Name - CoolPic
Full Name of File - CoolPic.jpg
*/


// Ex6 - Splitting String by Separator:

string listOfBeers = "Amstel, Heineken, Tuborg, Becks";
char[] separators = new char[] {' ', ',', '.'};
string[] beersArr = listOfBeers.Split(separators);

foreach (var item in beersArr)
{
    Console.Write($"\"{item}\"  ");
}
Console.WriteLine("\n");

beersArr = listOfBeers.Split(separators, StringSplitOptions.RemoveEmptyEntries);
foreach (var item in beersArr)
{
    Console.Write($"\"{item}\"  ");
}

/* Output:
"Amstel"  ""  "Heineken"  ""  "Tuborg"  ""  "Becks"  

"Amstel"  "Heineken"  "Tuborg"  "Becks"
*/


// Ex7 - Replacing Substring:

string doc = "Hello, some@gmail.com, you have been using some@gmail.com in your registration.";
string fixedDoc = doc.Replace("some@gmail.com", "john@smith.com");
Console.WriteLine(fixedDoc);

/* Output:
Hello, john@smith.com, you have been using john@smith.com in your registration.
*/


// Ex8 - Regular Expressions:

using System.Text.RegularExpressions;

string doc = "Smith's number: 0898880022\nFranky can be ";
doc += "found at 0888445566.\nSteven's mobile number: 0887654321";

string replacedDoc = Regex.Replace(doc, "(08)[0-9]{8}", "$1********");
Console.WriteLine(replacedDoc);

/* Output:
Smith's number: 08********
Franky can be found at 08********.
Steven's mobile number: 08********
*/


// Ex9 - Removing Unnecessary Characters:

string fileData = " \n\n David Allen ";
string reduced = fileData.Trim();  // reduced = "David Allen"
Console.WriteLine(reduced);

fileData = " 111 $ % David Allen ### s ";
char[] trimChars = new char[] {' ', '1', '$', '%', '#', 's'};
reduced = fileData.Trim(trimChars);  // reduced = "David Allen"
Console.WriteLine(reduced);

reduced = fileData.TrimEnd(trimChars);  // reduced = " 111 $ % David Allen"
Console.WriteLine(reduced);

reduced = fileData.TrimStart(trimChars);  // reduced = "David Allen ### s "
Console.WriteLine(reduced);

/* Output:
David Allen
David Allen
 111 $ % David Allen
David Allen ### s 
*/


/* Ex10 - Constructing Strings with StringBuilder Class:
The next task is to extract all capital letters from a text. We can
implement it in different ways – using an array, counter and filling the array
with all capital letters found; creating an object of type string and
concatenate capitals one by one to it; using the class StringBuilder.
Turning to the option of using an array, we have a problem: we do not know
what will be array size, as we have no idea in advance how many are the
capital letters in the text. We can create an array as large as the text, but
thus wasting unnecessary space in memory and we must also maintain a
counter that keeps where the array is full to.
Another option is to use a variable of type string. As we will iterate the
whole text and concatenate all capital letters to the variable, probably we will
lose efficiency again due to the strings concatenation.
*/

using System.Text;

string str = "AihAhlhvaihaBLEIAlKBHLShlkishfLKLHV";
StringBuilder result = new StringBuilder();
for (int i = 0; i < str.Length; i++)
{
    char ch = str[i];
    if (char.IsUpper(ch))
    {
    result.Append(ch);
    }
}
Console.WriteLine(result);  // AABLEIAKBHLSLKLHV

/* Output:
David Allen
David Allen
 111 $ % David Allen
David Allen ### s 
*/


/* Ex11 - Formatting Strings:
More information about formatting strings can be found on the Internet and in the 
Composite Formatting article in MSDN (http://msdn.microsoft.com/en-us/library/txafckwd.aspx).
*/

using System.Globalization;

DateTime date = DateTime.Now;
string name = "David Scott";
string task = "Introduction to C# book";
string location = "his office";
string formattedText = String.Format("Today is {0:MM/dd/yyyy} and {1} is working on {2} in {3}.",
date, name, task, location);
Console.WriteLine(formattedText);

string text = "11/12/2001";
string format = "MM/dd/yyyy";
DateTime parsedDate = DateTime.ParseExact(text, format, CultureInfo.InvariantCulture);
Console.WriteLine("Day: {0}\nMonth: {1}\nYear: {2}", parsedDate.Day, parsedDate.Month, parsedDate.Year);

/* Output:
Today is 08-12-2022 and David Scott is working on Introduction to C# book in his office.
Day: 12   
Month: 11 
Year: 2001
*/