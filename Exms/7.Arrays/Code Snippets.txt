// Exm1 - Symmetric Array: 

Console.Write("Enter a positive integer: ");
int n = int.Parse(Console.ReadLine());
int[] array = new int[n];

Console.WriteLine("Enter the values of the array:");
for (int i = 0; i < n; i++)
{
    array[i] = int.Parse(Console.ReadLine());
}

bool symmetric = true;
for (int i = 0; i < array.Length / 2; i++)
{
    if (array[i] != array[n - i - 1])
    {
        symmetric = false;
        break;
    }
}

Console.WriteLine("Is symmetric? {0}", symmetric);


/*  Input/Output:
Enter a positive integer: 5
Enter the values of the array:
1
2
3
2
1
Is symmetric? True
 */


// Exm2 - Multi-dimensional arrays:  

int[,] intMatrix = new int[3, 4];
float[,] floatMatrix = new float[8, 2];
string[,,] stringCube = new string[5, 5, 5];

// Declare and initialize a matrix of size 2 x 4
int[,] matrix =
{
    {1, 2, 3, 4}, // row 0 values
    {5, 6, 7, 8}, // row 1 values
};
// The matrix size is 2 x 4 (2 rows, 4 cols)

Console.WriteLine("The total rows: {0}", matrix.GetLength(0));
Console.WriteLine("The total columns: {0}",matrix.GetLength(1));

// Print the matrix on the console
for (int row = 0; row < matrix.GetLength(0); row++)
{
    for (int col = 0; col < matrix.GetLength(1); col++)
    {
        Console.WriteLine($"matrix[{row}, {col}] =  {matrix[row, col]}");
    }
}

/*  Input/Output:
The total rows: 2
The total columns: 4                                                                                                                              's' in 'int int.Parse(string s)'. 
matrix[0, 0] =  1   
matrix[0, 1] =  2   
matrix[0, 2] =  3   
matrix[0, 3] =  4   
matrix[1, 0] =  5   
matrix[1, 1] =  6   
matrix[1, 2] =  7   
matrix[1, 3] =  8   
 */



// Exm3 - Maximum Platform in a Matrix:  

// Declare and initialize the matrix
int[,] matrix = {
    { 0, 2, 4, 0, 9, 5 },
    { 7, 1, 3, 3, 2, 1 },
    { 1, 3, 9, 8, 5, 6 },
    { 4, 6, 7, 9, 1, 0 }
};

// Find the maximal sum platform of size 2 x 2
long bestSum = long.MinValue;
int bestRow = 0;
int bestCol = 0;

for (int row = 0; row < matrix.GetLength(0) - 1; row++)
{
    for (int col = 0; col < matrix.GetLength(1) - 1; col++)
    {
        long sum = matrix[row, col] + matrix[row, col + 1] + matrix[row + 1, col] + matrix[row + 1, col + 1];
        if (sum > bestSum)
        {
            bestSum = sum;
            bestRow = row;
            bestCol = col;
        }
    }
}
// Print the result
Console.WriteLine("The best platform is:");
Console.WriteLine(" {0} {1}", matrix[bestRow, bestCol], matrix[bestRow, bestCol + 1]);
Console.WriteLine(" {0} {1}", matrix[bestRow + 1, bestCol], matrix[bestRow + 1, bestCol + 1]);
Console.WriteLine("The maximal sum is: {0}", bestSum);

/*  Input/Output:
The best platform is:
 9 8
 7 9
The maximal sum is: 33
 */


// Exm4 - Arrays of Arrays (Jagged Arrays):  

// Declaration:
int[][] jaggedArray;
jaggedArray = new int[2][];
jaggedArray[0] = new int[5];
jaggedArray[1] = new int[3];

// Assigning at the time of Declaration:
int[][] myJaggedArray = {
    new int[] {5, 7, 2},
    new int[] {10, 20, 40},
    new int[] {3, 25}
};


// Exm5 - Pascal's Triangle:
const int HEIGHT = 12;

// Allocate the array in a triangle form
long[][] triangle = new long[HEIGHT + 1][];

for (int row = 0; row < HEIGHT; row++)
{
    triangle[row] = new long[row + 1];
}

// Calculate the Pascal's triangle
triangle[0][0] = 1;
for (int row = 0; row < HEIGHT - 1; row++)
{
    for (int col = 0; col <= row; col++)
    {
        triangle[row + 1][col] += triangle[row][col];
        triangle[row + 1][col + 1] += triangle[row][col];
    }
}

// Print the Pascal's triangle
for (int row = 0; row < HEIGHT; row++)
{
    Console.Write("".PadLeft((HEIGHT - row) * 2));
    for (int col = 0; col <= row; col++)
    {
        Console.Write("{0,3} ", triangle[row][col]);
    }
        Console.WriteLine();
}


/*  Input/Output:
                          1
                        1   1
                      1   2   1
                    1   3   3   1
                  1   4   6   4   1
                1   5  10  10   5   1
              1   6  15  20  15   6   1
            1   7  21  35  35  21   7   1
          1   8  28  56  70  56  28   8   1
        1   9  36  84 126 126  84  36   9   1
      1  10  45 120 210 252 210 120  45  10   1
    1  11  55 165 330 462 462 330 165  55  11   1
 */