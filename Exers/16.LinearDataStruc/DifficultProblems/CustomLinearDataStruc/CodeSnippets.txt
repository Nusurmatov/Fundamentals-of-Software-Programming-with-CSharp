/* Difficult Problem, Exersice 11 - Problem Statement:
Implement the data structure dynamic doubly linked list (DoublyLinkedList<T>) â€“ list, the 
elements of which have pointers both to the next and the previous elements. Implement 
the operations for adding, removing and searching for an element, as well as inserting an
element at a given index, retrieving an element by a given index and a method, which returns 
an array with the elements of the list.
*/

DoubleLinkedList<string> shoppingList = new DoubleLinkedList<string>();

shoppingList.Add("Milk");
shoppingList.Add("Honey");
shoppingList.Add("Olives", false);
shoppingList.Add("Water");
shoppingList.Add("Meat", false);

shoppingList.InsertAt("Apples", 0);
shoppingList.InsertAt("Bananas", 6);
shoppingList.InsertAt("Coffee", 3);

Console.Write(shoppingList);
Console.WriteLine("Item at position 3: {0}", shoppingList.GetAt(3));
Console.WriteLine("Item at position 4: {0}", shoppingList[4]);
Console.WriteLine("Size: {0}", shoppingList.Size);
Console.WriteLine("Is there milk in the list? {0}", shoppingList.Contains("Milk"));
Console.WriteLine("Index of honey: {0}", shoppingList.IndexOf("Honey"));
Console.WriteLine("Index of mango: {0}\n", shoppingList.IndexOf("Mango"));

shoppingList.Remove("Apples");
shoppingList.Remove("Honey");
shoppingList.Remove("Bananas");
shoppingList.Remove("Bananas");
shoppingList.RemoveAt(1);

Console.WriteLine("Size: {0}", shoppingList.Size);
string[] array = shoppingList.ToArray<string>();

foreach (var item in array)
{
    Console.Write($"{item} ");
}

/* Output:
{ Apples, Meat, Olives, Coffee, Milk, Honey, Water, Bananas }
Item at position 3: Coffee
Item at position 4: Milk
Size: 8
Is there milk in the list? True
Index of honey: 5
Index of mango: -1     

Size: 4
Meat Coffee Milk Water 
*/


/* Difficult Problem, Exersice 12 - Problem Statement:
Create a DynamicStack<T> class to implement dynamically a stack (like a linked list, 
where each element knows its previous element and the stack knows its last element). 
Add methods for all commonly used operations like Push(), Pop(), Peek(), Clear() and Count.
*/

Console.Clear();

var stack = new Stack<string>();
var customStack = new DynamicStack<string>();

stack.Push("one");
stack.Push("two");
stack.Push("three");
stack.Push("four");
stack.Push("five");

customStack.Push("one");
customStack.Push("two");
customStack.Push("three");
customStack.Push("four");
customStack.Push("five");

Console.Write("This is coming from Stack:          ");
foreach (var item in stack)
{
    Console.Write($"{item} ");
}

Console.Write("\nThis is coming from Custom Stack:   ");
foreach (var item in customStack)
{
    Console.Write($"{item} ");
}

Console.WriteLine("\n\nStack contains 'three': {0}", stack.Contains("three"));
Console.WriteLine("Custom Stack contains 'three': {0}", customStack.Contains("three"));

Console.WriteLine($"\nStack Count - {stack.Count}, Stack.Pop() - {stack.Pop()}");
Console.WriteLine($"Stack Count - {stack.Count}, Stack.Peek() - {stack.Peek()}");

Console.WriteLine($"\nCustom Stack Count - {customStack.Count}, CustomStack.Pop() - {customStack.Pop()}");
Console.WriteLine($"Custom Stack Count - {customStack.Count}, CustomStack.Peek() - {customStack.Peek()}");

Console.WriteLine("\nStack can Peek now: {0}", stack.TryPeek(out string? resultStackPeek));
Console.WriteLine("Custom Stack can Peek now: {0}\n", customStack.TryPeek(out string? resultCustomStackPeek));

Console.WriteLine("ToString() - {0}", stack);
Console.Write("ToString() - {0}", customStack);

stack.Clear();  
customStack.Clear();  

Console.WriteLine("\nStack Count {0}", stack.Count);
Console.WriteLine("Custom Stack Count: {0}", customStack.Count);

Console.WriteLine("\nStack can Pop now: {0}", stack.TryPop(out string? resultStackPop));
Console.WriteLine("Custom Stack can Pop now: {0}", customStack.TryPop(out string? resultCustomStackPop));

/* Output:
This is coming from Stack:          five four three two one
This is coming from Custom Stack:   five four three two one   

Stack contains 'three': True
Custom Stack contains 'three': True

Stack Count - 5, Stack.Pop() - five
Stack Count - 4, Stack.Peek() - four

Custom Stack Count - 5, CustomStack.Pop() - five
Custom Stack Count - 4, CustomStack.Peek() - four

Stack can Peek now: True
Custom Stack can Peek now: True

ToString() - System.Collections.Generic.Stack`1[System.String]
ToString() - { four, three, two, one }

Stack Count 0
Custom Stack Count: 0

Stack can Pop now: False
Custom Stack can Pop now: False 
*/


/* Difficult Problem, Exersice 13 - Problem Statement:
Implement the data structure "Deque". This is a specific list-like structure, similar to stack and queue, 
allowing to add elements at the beginning and at the end of the structure. Implement the operations for adding 
and removing elements, as well as clearing the deque. If an operation is invalid, throw an appropriate exception.
*/

Console.Clear();

Deque<string> deque = new Deque<string>();

deque.Enqueue("one");
deque.Enqueue("two");
deque.Enqueue("three");

deque.Push("four");
deque.Push("five");
deque.Push("six");

Console.WriteLine("Count: {0}", deque.Count);
Console.WriteLine(deque);

Console.WriteLine("\nItem at front: {0}", deque.Dequeue());
Console.WriteLine("Item at end: {0}", deque.Pop());

Console.WriteLine("\nCount: {0}", deque.Count);
Console.WriteLine(deque);

Console.WriteLine("\nItem at front: {0}", deque.Peek());
Console.WriteLine("Item at end: {0}", deque.Peek(atFront: false));
Console.WriteLine("Count: {0}", deque.Count);

Console.WriteLine("\nDeque contains 'six': {0}", deque.Contains("six"));
Console.WriteLine("Deque contains 'one': {0}", deque.Contains("one"));

deque.Clear();
Console.WriteLine("\nCount: {0}, Deque: {1}", deque.Count, deque);

/* Output:
Count: 6
{ six, five, four, one, two, three }

Item at front: three
Item at end: six

Count: 4
{ five, four, one, two }

Item at front: five
Item at end: two
Count: 4

Deque contains 'six': False
Deque contains 'one': True

Count: 0, Deque: Empty!
*/


/* Difficult Problem, Exersice 14 - Problem Statement:
Implement the structure "Circular Queue" with array, which doubles its capacity when its capacity is full. 
Implement the necessary methods for adding, removing the element in succession and retrieving without removing 
the element in succession. If an operation is invalid, throw an appropriate exception.
*/

Console.Clear();
CircularQueue<string> cQueue = new CircularQueue<string>();

cQueue.Enqueue("one");
cQueue.Enqueue("two");
cQueue.Enqueue("three");
cQueue.Enqueue("four");
cQueue.Enqueue("five");
cQueue.Enqueue("six");
cQueue.Enqueue("seven");

Console.WriteLine("Count: {0}", cQueue.Count);
Console.WriteLine(cQueue);

Console.WriteLine("\nDequeueing: {0}", cQueue.Dequeue());
Console.WriteLine("Dequeueing: {0}", cQueue.Dequeue());
Console.WriteLine("Dequeueing: {0}", cQueue.Dequeue());
Console.WriteLine("Peeking: {0}", cQueue.Peek());
Console.WriteLine("Count: {0}", cQueue.Count);
cQueue.Print();

Console.WriteLine("\nCircular Queue contains 'seven': {0}", cQueue.Contains("seven"));
Console.WriteLine("Circular Queue contains 'one': {0}", cQueue.Contains("one"));

cQueue.Clear();
Console.WriteLine("\nClearing...");
Console.WriteLine("Count: {0}", cQueue.Count);
Console.WriteLine("Circular Queue now: {0}", cQueue);

/* Output:
Count: 7
{ one, two, three, four, five, six, seven }

Dequeueing: one
Dequeueing: two
Dequeueing: three
Peeking: four
Count: 4
{ four five six seven }

Circular Queue contains 'seven': True
Circular Queue contains 'one': False

Clearing...
Count: 0
Circular Queue now: Circular Queue is Empty!
*/


/* Difficult Problem, Exersice 15 - Problem Statement:
Implement numbers sorting in a dynamic linked list without using an additional array or other data structure.
*/

Console.Clear();
Random random = new Random();
List<int> list = new List<int>();

for (int i = 0; i < 17; i++)
{
    list.Add(random.Next(-17, 17));
}

Console.WriteLine("Sorting in ascending order: ");
list.Print();
list.SortCustom();
list.Print();

Console.WriteLine("\nSorting in descending order: ");
list.SortCustom(IsAscending: false);
list.Print();

/* Output:
Sorting in ascending order:
{ 9 -12 -3 -4 -7 8 -1 -12 10 7 -16 7 -2 -12 2 -13 -7 }
{ -16 -13 -12 -12 -12 -7 -7 -4 -3 -2 -1 2 7 7 8 9 10 }

Sorting in descending order:
{ 10 9 8 7 7 2 -1 -2 -3 -4 -7 -7 -12 -12 -12 -13 -16 }
*/