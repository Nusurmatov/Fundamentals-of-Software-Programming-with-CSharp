/* Ex1 - Problem Statement:
Write a program that reads from the console a sequence of positive
integer numbers. The sequence ends when empty line is entered.
Calculate and print the sum and the average of the sequence. Keep
the sequence in List<int>.
*/

bool undone = true;
List<int> intList = new List<int>();
int input;

while (undone)
{
    Console.Write("Enter a positeve integer or nothing to quit: ");
    if (int.TryParse(Console.ReadLine(), out input))
    {
        intList.Add(input);
    }
    else
    {
        undone = false;
    }
}

Console.WriteLine("Sum of entered integers: {0}", intList.Sum());
Console.WriteLine("Average of entered integers: {0}", Math.Round(intList.Average(), 2));

/* Input/Output:
Enter a positeve integer or nothing to quit: 7
Enter a positeve integer or nothing to quit: 8
Enter a positeve integer or nothing to quit: 9
Enter a positeve integer or nothing to quit: 17
Enter a positeve integer or nothing to quit: 35
Enter a positeve integer or nothing to quit: 78
Enter a positeve integer or nothing to quit:
Sum of entered integers: 154
Average of entered integers: 25.67
*/


/* Ex2 - Problem Statement:
Write a program, which reads from the console N integers and prints
them in reversed order. Use the Stack<int> class.
*/

Stack<int> intStack = new Stack<int>();
int input;

Console.Write("Enter a postive integer bigger than 1: ");
int n = Convert.ToInt32(Console.ReadLine());

for (int i = 0; i < n; i++)
{
    Console.Write($"Enter integer{i+1}: ");
    if (int.TryParse(Console.ReadLine(), out input))
    {
        intStack.Push(input);
    }
    else
    {
        Console.WriteLine("Incorrect value!");
    }
}

for (int i = n; i > 0; i--)
{
    Console.WriteLine($"integer{i} -> {intStack.Pop()}");
}

/* Input/Output:
Enter a postive integer bigger than 1: 7 
Enter integer1: 78
Enter integer2: -4
Enter integer3: 4
Enter integer4: 98
Enter integer5: 7
Enter integer6: 9
Enter integer7: 89
integer7 -> 89
integer6 -> 9 
integer5 -> 7 
integer4 -> 98
integer3 -> 4 
integer2 -> -4
integer1 -> 78
*/


/* Ex3 - Problem Statement:
Write a program that reads from the console a sequence of positive
integer numbers. The sequence ends when an empty line is entered. Print
the sequence sorted in ascending order.
*/

bool undone = true;
List<int> intList = new List<int>();
int input;

while (undone)
{
    Console.Write("Enter a positeve integer or nothing to quit: ");
    if (int.TryParse(Console.ReadLine(), out input))
    {
        intList.Add(input);
    }
    else
    {
        undone = false;
    }
}

intList.Sort();

Console.Write("Entered integers after Ascending Sorting: ");
foreach (var item in intList)
{
    Console.Write($"{item} ");
}

/* Input/Output:
Enter a positeve integer or nothing to quit: 7
Enter a positeve integer or nothing to quit: 79
Enter a positeve integer or nothing to quit: 1654
Enter a positeve integer or nothing to quit: 4
Enter a positeve integer or nothing to quit: 654
Enter a positeve integer or nothing to quit: 7
Enter a positeve integer or nothing to quit: 98
Enter a positeve integer or nothing to quit: 
Entered integers after Ascending Sorting: 4 7 7 79 98 654 1654 
*/


/* Ex4 - Problem Statement:
Write a method that finds the longest subsequence of equal numbers
in a given List<int> and returns the result as new List<int>. Write a
program to test whether the method works correctly.
*/

Random random = new Random();
List<int> intList = GenerateRandomList(random.Next(7, 17), random.Next(1, 7), random.Next(7, 10));
PrintList(intList);
Console.Write(" -> ");
PrintList(GetLongestSubsequenceOfEqualNumbers(intList));

List<int> GetLongestSubsequenceOfEqualNumbers(List<int> list)
{
    var result = new List<int>();
    int n = list[0];
    int length = 1;
    int maxLength = 1;

    for (int i = 0; i < list.Count - 1; i++)
    {
        if (list[i] == list[i+1])
        {
            length++;
        }
        else
        {
            length = 1;
        }

        if (length > maxLength)
        {
            n = list[i];
            maxLength = length;
        }
    }
    result.AddRange(Enumerable.Repeat(n, maxLength));

    return result;
}

void PrintList<T>(List<T> items)
{
    Console.Write("{ ");
    foreach (var item in items)
    {
        Console.Write($"{item} ");
    }
    Console.Write("}");
}
    
List<int> GenerateRandomList(int length, int lowerBound, int upperBound)
{
    var result = new List<int>();

    for (int i = 0; i < length; i++)
    {
        result.Add(random.Next(lowerBound, upperBound));
    }

    return result;
}

/* Output:
{ 7 6 7 7 7 7 6 6 6 6 7 7 7 7 6 7 } -> { 7 7 7 7 }
{ 5 5 5 7 6 5 5 5 6 6 7 } -> { 5 5 5 }
{ 5 6 6 6 5 5 6 6 6 6 6 5 6 } -> { 6 6 6 6 6 }
{ 4 4 6 4 4 5 5 4 5 4 4 5 6 5 } -> { 4 4 }
*/


/* Ex5 - Problem Statement:
Write a program, which removes all negative numbers from a sequence. 
Example: array = {19, -10, 12, -6, -3, 34, -2, 5} -> {19, 12, 34, 5}
*/

Random random = new Random();
List<int> intList = GenerateRandomList(random.Next(7, 17), random.Next(-17, -1), random.Next(1, 17));
PrintList(intList);
Console.Write(" -> ");

var removeNegatives = intList.FindAll(n => (n >= 0));
PrintList(removeNegatives);

void PrintList<T>(List<T> items)
{
    Console.Write("{ ");
    foreach (var item in items)
    {
        Console.Write($"{item} ");
    }
    Console.Write("}");
}
    
List<int> GenerateRandomList(int length, int lowerBound, int upperBound)
{
    var result = new List<int>();

    for (int i = 0; i < length; i++)
    {
        result.Add(random.Next(lowerBound, upperBound));
    }

    return result;
}

/* Output:
{ -8 7 5 10 3 10 -1 6 -6 -3 -2 4 } -> { 7 5 10 3 10 6 4 }
{ 8 -7 7 -5 -7 1 -8 4 8 -6 1 3 } -> { 8 7 1 4 8 1 3 }
{ 13 7 6 2 5 -1 2 -3 -2 0 2 -1 -1 12 11 -2 } -> { 13 7 6 2 5 2 0 2 12 11 }
*/


